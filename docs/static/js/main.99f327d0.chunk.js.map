{"version":3,"sources":["data/consumption.js","data/emissions.js","data/rank.js","data/colors.js","data/names.js","components/Year.js","components/Timeline.js","components/BarChartRace.js","components/TransparencyDialog.js","App.js","reportWebVitals.js","index.js"],"names":["consumptionKeys","all","heating","electricity","traffic","parseConsumptionRow","d","date","Date","year","oils","oilstotal","coal","coaltotal","naturalgas","nuclear","nuclearenergy","hydro","hydropower","wind","windpower","wood","woodtotal","peat","heatpumps","other","recoveredrecycledtotal","industryreactions","electricityimport","gasoline","biogasoline","diesel","biodiesel","lpg","lightoil","lightfueloil","heavyoil","heavyfueloil","otheroils","biofueloil","recycledoil","refinerygas","woodsmall","woodindustry","blackliquor","recoveredfossil","demolitionfossil","otherwastefuels","recoveredbio","demolitionbio","otherbioenergy","biogas","solar","solarenergy","hydrogen","emissionsKeys","parseEmissionsRow","transportoil","transportfuels","othercoals","otherfossil","total","otherfossilfuels","co2transfer","woodfuels","otherbio","othernonfossilfuels","createDate","keys","at","a","bt","b","ip","key","value","next","entries","Object","filter","includes","map","values","fromEntries","rank","sort","pickAndRank","data","interpolationSteps","frames","pairs","i","push","length","assignColors","colors","interpolateBuPu","names","Year","frame","pause","setPause","setFilter","select","useRef","getFullYear","undefined","className","onClick","ref","onChange","current","Timeline","unit","setFrame","target","useEffect","width","clientWidth","height","clientHeight","wrap","series","stack","x","scaleTime","domain","extent","range","y","scaleLinear","max","p","call","axisBottom","axisLeft","selectAll","join","attr","style","area","y0","y1","transition","duration","ease","easeLinear","on","event","preventDefault","window","rect","node","getBoundingClientRect","Math","min","pointer","floor","BarChartRace","reverse","lastFrame","svg","scaleBand","padding","barHeight","bandwidth","textPad","texty","textx","previousValue","_","nextValue","barx","v","barw","formatNumber","format","textTween","interpolateNumber","t","this","textContent","slice","enter","append","update","exit","bar","remove","text","g","tween","TransparencyDialog","show","hide","title","href","App","useState","rawConsumption","setRawConsumption","rawEmissions","setRawEmissions","consumption","setConsumption","emissions","setEmissions","consumptionColors","setConsumptionColors","emissionColors","setEmissionColors","dialog","setDialog","setTarget","csv","then","years","begin","end","emissionsZeroYears","concat","level90","reduce","s","position","minHeight","blur","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.99f327d0.chunk.js","sourcesContent":["export const consumptionKeys = {\n    all: [ 'coal','peat','oils','naturalgas','industryreactions','wood','nuclear','electricityimport','hydro','wind','heatpumps','other' ],\n    heating: [ 'coal', 'peat', 'heavyoil', 'lightoil', 'naturalgas', 'recoveredfossil', 'woodsmall', 'recoveredbio', 'heatpumps' ],\n    electricity: [ 'nuclear', 'electricityimport', 'hydro', 'wind', 'solar' ],\n    traffic: [ 'gasoline', 'diesel', 'biogasoline', 'biodiesel', 'biogas' ]\n}\n\nexport const parseConsumptionRow = d => ({\n    date: new Date(+d.year, 0, 1),\n    \n    oils: +d.oilstotal,\n    coal: +d.coaltotal,\n    naturalgas: +d.naturalgas,\n    nuclear: +d.nuclearenergy,\n    hydro: +d.hydropower,\n    wind: +d.windpower,\n    wood: +d.woodtotal,\n    peat: +d.peat,\n    heatpumps: +d.heatpumps,\n    other: +d.recoveredrecycledtotal,\n    industryreactions: +d.industryreactions,\n    electricityimport: +d.electricityimport,\n        \n    gasoline: +d.gasoline,\n    biogasoline: +d.biogasoline,\n    diesel: +d.diesel,\n    biodiesel: +d.biodiesel,\n    lpg: +d.lpg,\n    lightoil: +d.lightfueloil,\n    heavyoil: +d.heavyfueloil,\n    otheroils: (+d.otheroils) + (+d.biofueloil) + (+d.recycledoil) + (+d.refinerygas),\n    //coal: +d.coaltotal,\n    //naturalgas: +d.naturalgas,\n    //nuclear: +d.nuclearenergy,\n    //hydro: +d.hydropower,\n    //wind: +d.windpower,\n    woodsmall: +d.woodsmall,\n    woodindustry: (+d.blackliquor) + (+d.woodindustry),\n    //peat: +d.peat,\n    recoveredfossil: (+d.recoveredfossil) + (+d.demolitionfossil) + (+d.otherwastefuels),\n    recoveredbio: (+d.recoveredbio) + (+d.demolitionbio) + (+d.otherbioenergy),\n    biogas: +d.biogas,\n    solar: +d.solarenergy,\n    hydrogen: +d.hydrogen,\n    //heatpumps: +d.heatpumps,\n    //industryreactions: +d.industryreactions,\n    //electricityimport: +d.electricityimport,\n})\n","export const emissionsKeys = {\n    all: ['coal','peat','heavyoil','lightoil','transportoil','naturalgas','otherfossil','wood','otherbio'],\n    heating: ['coal','peat','heavyoil','lightoil','naturalgas','otherfossil','otherbio'],\n    electricity: ['coal','peat','heavyoil','lightoil','naturalgas','otherfossil'],\n    traffic: ['transportoil']\n}\n\nexport const parseEmissionsRow = d => ({\n    date: new Date(+d.year, 0, 1),\n    heavyoil: +d.heavyfueloil,\n    lightoil: (+d.lightfueloil) + (+d.otheroils),\n    transportoil: +d.transportfuels,\n    coal: (+d.coal) + (+d.othercoals),\n    naturalgas: +d.naturalgas,\n    peat: +d.peat,\n    otherfossil: (+d.year) < 1990 ? +d.total : ((+d.otherfossilfuels) + (+d.co2transfer)),\n    wood: +d.woodfuels,\n    otherbio: +d.othernonfossilfuels\n})\n\nexport const emissionsZeroYears = (begin, end) => {\n    const emissions = []\n    for (let year = begin; year < end; year++) {\n        emissions.push({\n            date: new Date(year, 0, 1),\n            heavyoil: 0,\n            lightoil: 0,\n            transportoil: 0,\n            coal: 0,\n            naturalgas: 0,\n            peat: 0,\n            otherfossil: 0,\n            wood: 0,\n            otherbio: 0\n        })\n    }\n    return emissions\n}\n","import { pairs } from \"d3\"\n\nconst createDate = (keys, at, a, bt, b) => {\n    const ip = (key, value, next) => at * value + bt * next[key]\n    const entries = Object.entries(a)\n        .filter(([key, _]) => key === 'date' || keys.includes(key))\n        .map(([key, value]) => [key, key === 'date' ? new Date(ip(key, value, b)) : ip(key, value, b)])\n    return {\n        values: Object.fromEntries(entries),\n        rank: entries.filter(([key, value]) => key !== 'date' && value > 0).sort((a, b) => b[1] - a[1])\n    }\n}\n\nexport const pickAndRank = (data, keys, interpolationSteps) => {\n    const frames = []\n    for (const [a,b] of pairs(data)) {\n        for (let i = 0; i < interpolationSteps; ++i) {\n            const bt = i / interpolationSteps\n            const at = 1 - bt\n            frames.push(createDate(keys, at, a, bt, b))\n        }\n    }\n    frames.push(createDate(keys, 0, data[data.length - 2], 1, data[data.length - 1]))\n    return frames\n}\n","import { interpolateBuPu } from \"d3\"\n\nexport const assignColors = (keys) => {\n    const colors = {}\n    for (let i = 0; i < keys.length; i++) {\n        colors[keys[i]] = interpolateBuPu(0.44 - 0.4 * i / keys.length)\n    }\n    return colors\n}\n","export const names = {\n    oils: 'Oil',\n    heavyoil: 'Heavy fuel oil',\n    lightoil: 'Light fuel oil',\n    transportoil: 'Transport fuels',\n    coal: 'Coal',\n    naturalgas: 'Natural gas',\n    industryreactions: 'Industry reactions',\n    peat: 'Peat',\n    otherfossil: 'Other fossil fuels',\n    wood: 'Wood',\n    otherbio: 'Other non-fossil fuels',\n    nuclear: 'Nuclear energy',\n    hydro: 'Hydro power',\n    wind: 'Wind power',\n    heatpumps: 'Heat pumps',\n    electricityimport: 'Electricity import',\n    other: 'Recycled sources',\n    gasoline: 'Gasoline',\n    biogasoline: 'Gasoline bio component',\n    diesel: 'Diesel',\n    biodiesel: 'Biodiesel',\n    lpg: 'Propane',\n    otheroils: 'Other oils',\n    woodsmall: 'Wood small-scale',\n    woodindustry: 'Wood industrial',\n    recoveredfossil: 'Fossil waste',\n    recoveredbio: 'Non-fossil waste',\n    biogas: 'Biogas',\n    solar: 'Solar energy',\n    hydrogen: 'Hydrogen'\n}\n","import { useRef } from \"react\"\n\nconst Year = ({data, frame, pause, setPause, setFilter}) => {\n    \n    const select = useRef()\n\n    const year = data.length > 0 ? data[frame].values.date.getFullYear() : undefined\n    const togglePause = () => setPause(!pause)\n    const setFilterValue = () => setFilter(select.current.value)\n\n    return (\n        <div className=\"Year\">\n            <h1>{year}</h1>\n            <button onClick={togglePause}>{pause ? '▶' : '■'}</button>\n            <select ref={select} onChange={setFilterValue}>\n                <option value=\"all\">All</option>\n                <option value=\"heating\">Heating</option>\n                <option value=\"electricity\">Electricity</option>\n                <option value=\"traffic\">Traffic</option>\n            </select>\n        </div>\n    )\n}\n\nexport default Year\n","import { area, axisBottom, axisLeft, easeLinear, extent, max, pointer, scaleLinear, scaleTime, select, stack } from \"d3\"\nimport { useEffect, useRef } from \"react\"\n\nconst Timeline = ({unit, data, frame, setFrame, keys, colors, target}) => {\n    const frameDuration = 250\n\n    const ref = useRef()\n\n    useEffect(() => {\n        if (data.length === 0) {\n            return\n        }\n        const width = ref.current.clientWidth - 60 - 10\n        const height = ref.current.clientHeight - 10 - 30\n        const wrap = select(ref.current).select('.wrap')\n\n        const series = stack().keys(keys)(data.map(d => d.values))\n\n        const x = scaleTime()\n            .domain(extent(data.map(d => d.values.date)))\n            .range([0, width])\n\n        const y = scaleLinear()\n            .domain([0, max(series, (d) => max(d.map(p => p[1])))])\n            .range([height, 0])\n\n        wrap.select('.xaxis').call(axisBottom(x))\n        wrap.select('.yaxis').call(axisLeft(y))\n        wrap.select('.fills').selectAll('.area')\n            .data(series)\n            .join('path')\n            .attr('class', 'area')\n            .style('fill', d => colors[d.key])\n            .attr('d', area()\n                .x(d => x(d.data.date))\n                .y0(d => y(d[0]))\n                .y1(d => y(d[1]))\n            )\n\n        wrap.select('.year').call(year => year.transition()\n            .duration(frameDuration)\n            .ease(easeLinear)\n            .attr('x', x(data[frame].values.date))\n        )\n\n        wrap.on('mousedown', (event) => {\n            event.preventDefault()\n            select(window)\n                .on('mousemove', (event) => {\n                    const rect = select(ref.current).node().getBoundingClientRect()\n                    const p = Math.max(Math.min(pointer(event)[0] - rect.x - 60, width - 1), 0)\n                    setFrame(Math.floor(p / width * data.length))\n                })\n                .on('mouseup', () => {\n                    select(window)\n                        .on('mousemove', null)\n                        .on('mouseup', null)\n                })\n        })\n\n        if (target !== undefined) {\n            wrap.selectAll('.target')\n                .data([target])\n                .join('rect')\n                .attr('class', 'target')\n                .attr('y', d => y(d))\n        }\n\n    }, [data, frame, setFrame, keys, colors, target])\n\n    return (\n        <div className=\"Timeline\">\n            <svg ref={ref}>\n                <g className=\"wrap\">\n                    <text className=\"unit\">{unit}</text>\n                    <g className=\"xaxis\"></g>\n                    <g className=\"yaxis\"></g>\n                    <g className=\"fills\"></g>\n                    <rect className=\"year\"></rect>\n                </g>\n            </svg>\n        </div>\n    )\n}\n\nexport default Timeline\n","import { easeLinear, format, interpolateNumber, max, range, scaleBand, scaleLinear, select } from \"d3\"\nimport { useEffect, useRef } from \"react\"\n\nconst BarChartRace = ({data, frame, setFrame, pause, names, colors, reverse}) => {\n    const barCount = 8\n    const frameDuration = 250\n\n    const ref = useRef()\n\n    useEffect(() => {\n        if (data.length === 0) {\n            return\n        }\n        const width = ref.current.clientWidth\n        const height = ref.current.clientHeight\n        const lastFrame = data.length - 1\n        const svg = select(ref.current)\n\n        const x = scaleLinear()\n            .domain([0, max(data, (d) => max(d.rank.map(([_, value]) => value)))])\n            .range(reverse ? [width, 0] : [0, width])\n\n        const y = scaleBand()\n            .domain(range(barCount))\n            .range([0, height])\n            .padding(0.1)\n\n        const transition = svg.transition()\n            .duration(frameDuration)\n            .ease(easeLinear)\n\n        const barHeight = y.bandwidth()\n        const textPad = 0.4 * barHeight\n        const texty = (y) => y + textPad\n        const textx = (x) => reverse ? x - textPad / 4 : x + textPad / 4\n        const previousValue = (key, _) => frame > 0 ? data[frame - 1].values[key] || 0 : 0\n        const nextValue = (key, _) => frame < lastFrame ? data[frame + 1].values[key] || 0 : 0\n        const barx = reverse ? v => x(v) : _ => x(0)\n        const barw = reverse ? v => Math.max(x(0) - x(v), 0) : v => Math.max(x(v) - x(0), 0)\n\n        const formatNumber = format(',d')\n        const textTween = (a, b) => {\n            const i = interpolateNumber(a, b);\n            return function (t) { this.textContent = formatNumber(i(t)) }\n        }\n\n        svg.selectAll('.bar')\n            .data(data[frame].rank.slice(0, barCount), ([key, _]) => key)\n            .join(\n                enter => enter.append('rect')\n                    .attr('fill', ([key, _]) => colors[key])\n                    .attr('class', 'bar')\n                    .attr('x', ([key, value]) => barx(previousValue(key, value)))\n                    .attr('y', _ => height)\n                    .attr('width', ([key, value]) => barw(previousValue(key, value)))\n                    .attr('height', barHeight),\n                update => update,\n                exit => exit.call(bar => bar.transition(transition)\n                    .attr('x', ([key, value]) => barx(nextValue(key, value)))\n                    .attr('y', _ => height)\n                    .attr('width', ([key, value]) => barw(nextValue(key, value)))\n                    .remove()\n                )\n            )\n            .call(bar => bar.transition(transition)\n                .attr('x', ([_, value]) => barx(value))\n                .attr('y', (_, i) => y(i))\n                .attr('width', ([_, value]) => barw(value))\n            )\n\n        svg.selectAll('.label')\n            .data(data[frame].rank.slice(0, barCount), ([key, _]) => key)\n            .join(\n                enter => enter.append('text')\n                    .attr('class', 'label')\n                    .attr('text-anchor', reverse === true ? 'end' : 'start')\n                    .text(([key, _]) => names[key])\n                    .attr('x', textx(x(0)))\n                    .attr('y', _ => texty(height))\n                    .call(text => text.append(\"tspan\")\n                        .attr('x', textx(x(0)))\n                        .attr('dy', '1.15em')\n                    ),\n                update => update,\n                exit => exit.call(text => text.transition(transition)\n                    .attr('y', _ => texty(height))\n                    .remove()\n                    .call(g => g.select(\"tspan\").tween(\"text\", ([key, value]) => textTween((previousValue(key, value), value))))\n                )\n            )\n            .call(text => text.transition(transition)\n                .attr('y', (_, i) => texty(y(i)))\n                .call(g => g.select(\"tspan\").tween(\"text\", ([key, value]) => textTween(previousValue(key, value), value)))\n            )\n\n        if (!pause && frame < lastFrame) {\n            transition.on('end', () => setFrame(frame + 1))\n        }\n    }, [data, frame, setFrame, pause, names, colors, reverse])\n\n    return (\n        <div className=\"BarChartRace\">\n            <svg ref={ref}></svg>\n        </div>\n    )\n}\n\nexport default BarChartRace\n","import React from 'react'\n\nconst TransparencyDialog = ({show, hide}) => {\n\n  if (!show) {\n    return (\n      <></>\n    )\n  }\n  return (\n    <div className=\"dialog-shadow\" onClick={() => hide()}>\n      <div className=\"dialog-box\">\n        <button className=\"dialog-close\" title=\"Close\" onClick={() => hide()}>X</button>\n        <h3>Data Transparency Statement</h3>\n        <p>\n          <a href=\"https://www.stat.fi/index_en.html\">Statistics Finland</a> publishes time series of\n          yearly primary energy consumption¹ by energy source from 1960 to 2018\n          and greenhouse gas, more specifically carbon dioxide (CO₂), emissions² by fuel from 1990 to 2018.\n          Statistics Finland works as a government established public authority which under review provides statistics for decision making and research.\n          One of their responsibilities is the annual national inventory report on greenhouse gases for United Nations Framework Convention on Climate Change.\n          The data collection for that is accepted as defined in national inventory system and carried out with the Finnish Environment Institute,\n          the Natural Resources Institute, and the VTT Technical Research Center of Finland. For energy consumption they collect data from\n          Finnish energy organisations and directly from industry. The data is as current as official statistics get.\n          It is updated yearly but lags 1-2 years behind.\n        </p>\n        <p>\n          <ol>\n            <li><a href=\"https://pxhopea2.stat.fi/sahkoiset_julkaisut/energia2019/html/engl0000.htm\">1.1-5 Total energy consumption by energy source</a></li>\n            <li><a href=\"https://pxhopea2.stat.fi/sahkoiset_julkaisut/energia2019/html/engl0011.htm\">12.3.1 Carbon dioxide emissions by fuels</a></li>\n          </ol>\n        </p>\n        <p>\n          * This visualization incorporates energy consumption data starting from 1960. However, emission data by fuels exists only since 1990.\n          Before that from 1970 we visualize just total emission level that is available in the data.\n        </p>\n        <p>\n          * For animation purposes we interpolate data points between years. Linear interpolation <strong>ignores seasonal variance inside each year</strong>\n          which would in reality display as pulsing change peaking every winter.\n        </p>\n        <p>\n          * The red level at the energy sector CO₂ emissions timeline marks 40% reduction from 1990 level. This is the minimum 2030 reduction goal set for whole EU\n          to meet Paris agreement. In practice, goals for individual countries are agreed separately and Finland's targets are more ambitious. Also the target\n          emission levels are already argued to be too high to meet the Paris climate goals. We will keep the overal 40% guideline here as the actual goals are\n          agreed inside different economical sectors.\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default TransparencyDialog\n","import { csv } from 'd3'\nimport { useEffect, useState } from 'react'\nimport './App.css'\nimport { parseConsumptionRow, consumptionKeys } from './data/consumption'\nimport { parseEmissionsRow, emissionsKeys, emissionsZeroYears } from './data/emissions'\nimport { pickAndRank } from './data/rank'\nimport { assignColors } from './data/colors'\nimport { names } from './data/names'\nimport Year from './components/Year'\nimport Timeline from './components/Timeline'\nimport BarChartRace from './components/BarChartRace'\nimport TransparencyDialog from './components/TransparencyDialog'\n\nconst App = () => {\n\n  const interpolationSteps = 3\n\n  const [rawConsumption, setRawConsumption] = useState([])\n  const [rawEmissions, setRawEmissions] = useState([])\n  const [consumption, setConsumption] = useState([])\n  const [emissions, setEmissions] = useState([])\n  const [consumptionColors, setConsumptionColors] = useState({})\n  const [emissionColors, setEmissionColors] = useState({})\n  const [frame, setFrame] = useState(0)\n  const [pause, setPause] = useState(false)\n  const [filter, setFilter] = useState('all')\n  const [dialog, setDialog] = useState(false)\n  const [target, setTarget] = useState(0)\n\n  useEffect(() => {\n    csv('primaryenergy.csv', parseConsumptionRow).then(data => setRawConsumption(data))\n    csv('energysectorco2.csv', parseEmissionsRow).then(data => setRawEmissions(data))\n  }, [])\n\n  useEffect(() => {\n    if (rawConsumption.length > 0 && rawEmissions.length > 0) {\n      const consumption = pickAndRank(rawConsumption, consumptionKeys[filter], interpolationSteps)\n      const years = [rawConsumption[0].date.getFullYear(), rawEmissions[0].date.getFullYear()]\n      const emissions = pickAndRank(emissionsZeroYears(years[0], years[1]).concat(rawEmissions), emissionsKeys[filter], interpolationSteps)\n      const level90 = emissions.length > 0 ? Object.entries(emissions[90].values).filter(p => p[0] !== 'date').reduce((s, p) => s + p[1], 0) : 0\n      setConsumption(consumption)\n      setConsumptionColors(assignColors(consumptionKeys[filter]))\n      setEmissions(emissions)\n      setEmissionColors(assignColors(emissionsKeys[filter]))\n      setTarget(0.4 * level90)\n    }\n  }, [rawConsumption, rawEmissions, filter])\n\n  const toggleDialog = ({target}) => {\n    setDialog(!dialog)\n    target.blur()\n  }\n\n  return (\n    <div style={{position: 'relative', minHeight: '100%'}}>\n      <div className=\"App\">\n        <div className=\"left column\">\n          <h1>Energy consumption by source</h1>\n          <BarChartRace data={consumption} frame={frame} setFrame={setFrame} pause={pause} names={names} colors={consumptionColors}></BarChartRace>\n          <Timeline unit=\"TJ\" data={consumption} frame={frame} setFrame={setFrame} keys={consumptionKeys[filter]} colors={consumptionColors}></Timeline>\n        </div>\n        <div className=\"right column\">\n          <h1>Energy sector carbon dioxide emissions</h1>\n          <BarChartRace data={emissions} frame={frame} setFrame={setFrame} pause={pause} names={names} colors={emissionColors} reverse={true}></BarChartRace>\n          <Timeline unit=\"10⁹ CO₂\" data={emissions} frame={frame} setFrame={setFrame} keys={emissionsKeys[filter]} colors={emissionColors} target={target}></Timeline>\n        </div>\n        <div className=\"center\">\n          <Year data={consumption} frame={frame} pause={pause} setPause={setPause} setFilter={setFilter}></Year>\n          {filter === 'heating' &&\n            <p>Includes combined electricity production.</p>\n          }\n          {filter === 'electricity' &&\n            <p>Excludes electricity from combined heat production.</p>\n          }\n          <p className=\"red\">Rough target level at 2030</p>\n        </div>\n      </div>\n      <footer>\n        <button className=\"transparency\" title=\"Transparency Badge\" onClick={toggleDialog}>🕵️ data transparency statement</button>\n        &nbsp;| <a href=\"https://creativecommons.org/licenses/by/4.0/\">content license CC BY 4.0</a>\n        &nbsp;| <a href=\"https://github.com/teemulehtinen/energy-in-finland-visualization\">open source MIT at GitHub</a>\n      </footer>\n      <TransparencyDialog show={dialog} hide={() => setDialog(false)}></TransparencyDialog>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}